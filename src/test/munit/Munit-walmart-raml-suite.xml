<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="Munit-walmart-raml-suite.xml" />
	<munit:test name="get:\products\get-details:walmart-raml-config-test" doc:id="3f5ea601-e810-4b22-9dcb-217e64971827" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="14db621a-6548-43ea-8989-16e240f0d573" >
				<munit:payload value="#[readUrl('classpath://getproductsgetdetailswalmartramlconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getproductsgetdetailswalmartramlconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getproductsgetdetailswalmartramlconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\products\get-details:walmart-raml-config" doc:id="8da29d67-711d-40fb-b4f1-083a52c82173" name="get:\products\get-details:walmart-raml-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="de935dc2-7578-4fc7-851b-3a38c0c6fc47" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getproductsgetdetailswalmartramlconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:assert doc:name="Assert variables" doc:id="c17dae63-993f-4a6b-981e-492982dba231" message="The variables do not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getproductsgetdetailswalmartramlconfigtest::assert_expression_variables
---
assert_expression_variables::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="walmart-raml-main-test" doc:id="c9cbb07b-6ba9-4273-b56e-0ca57df3acc4" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="a86e853f-ee99-4ec4-9223-f9a057e1d236" >
				<munit:payload value="#[readUrl('classpath://walmartramlmaintest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://walmartramlmaintest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to walmart-raml-main" doc:id="39bfd107-dd12-4fa9-900f-9b5cd0e47732" name="walmart-raml-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="eaf35546-2c0d-4819-9afc-b6e39dd7ccd0" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import walmartramlmaintest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:assert doc:name="Assert variables" doc:id="63558ed0-cb63-40ec-9ed7-1fecd8b99638" message="The variables do not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import walmartramlmaintest::assert_expression_variables
---
assert_expression_variables::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="Retriving-store-details" doc:id="30fb4d98-2eff-431a-b31f-d93deb0551d3" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Request" doc:id="68e94256-c8f7-4a08-a915-8d0137a9f9d9" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="093962cc-9869-468d-8c21-67d04f7e5954" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://Retrivingstoredetails\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://Retrivingstoredetails\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://Retrivingstoredetails\mock_variable_.dwl')]" />
						<munit-tools:variable key="quantity" value="#[output application/java --- readUrl('classpath://Retrivingstoredetails\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="productTypeId" value="#[output application/json --- readUrl('classpath://Retrivingstoredetails\mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="Orderid" value="#[output application/json --- readUrl('classpath://Retrivingstoredetails\mock_variable_3.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="fe07f374-3687-44ca-887b-cd9cf0ddd34f" >
				<munit:payload value="#[output application/json --- readUrl('classpath://Retrivingstoredetails\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://Retrivingstoredetails\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://Retrivingstoredetails\set-event_variable_.dwl')]" />
					<munit:variable key="quantity" value="#[output application/java --- readUrl('classpath://Retrivingstoredetails\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
					<munit:variable key="productTypeId" value="#[output application/json --- readUrl('classpath://Retrivingstoredetails\set-event_variable_2.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="Orderid" value="#[output application/json --- readUrl('classpath://Retrivingstoredetails\set-event_variable_3.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Store-implementation-api-storeFlow" doc:id="5630e37f-cf2f-4c89-aabe-e506b6eca3a7" name="Store-implementation-api-storeFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="f77f0236-e3fa-4693-a4da-099514e8cce6" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import Retrivingstoredetails::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:assert doc:name="Assert variables" doc:id="b4440bfd-2bb3-4198-8453-f9a272da9de3" message="The variables do not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import Retrivingstoredetails::assert_expression_variables
---
assert_expression_variables::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
